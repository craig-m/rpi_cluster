---
# Docker
- debug: msg="Installing Docker container engine "
- debug: msg="enabled and started {{ rpi_docker_enabled }} "


# copy uninstall script
- name: copy uninstall script
  copy:
    src: "remove_docker.sh"
    dest: "/opt/cluster/bin/"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: 0755
  tags: [docker]


# check for docker bin
- name: check for docker bin
  stat: path=/usr/bin/docker
  register: usrbin_docker
  tags: [docker]


# copy install script
- name: copy getdocker.sh
  copy:
    src: getdocker.sh
    dest: /opt/cluster/mysrc/getdocker.sh
    mode: 0775
  tags: [docker]


# run installer
- name: run installer
  shell: /opt/cluster/mysrc/getdocker.sh
  args:
    chdir: /opt/cluster/mysrc/
  when: usrbin_docker.stat.exists == False
  tags: [docker]
  register: rangetdocker


# wait for daemon to start
- name: pause
  pause:
    seconds: 25
  when: rangetdocker.changed
  tags: [docker]


# check package installed
- name: docker packages installed
  apt: name={{ item }} state=present
  with_items:
       - docker-ce
  become: yes
  retries: 2
  tags: [docker]
  when: rangetdocker.changed


# enabled: START on boot
- name: docker enabled on boot
  service: name=docker enabled=yes
  become: yes
  tags: [docker]
  when: rpi_docker_enabled == true


# enabled: daemon START
- name: docker started
  service: name=docker state=started
  become: yes
  tags: [docker]
  when: rpi_docker_enabled  == true


# disabled: STOP on boot
- name: docker stopped on boot
  service: name=docker enabled=no
  become: yes
  tags: [docker]
  when: rpi_docker_enabled == false


# disabled: daemon STOP
- name: docker started
  service: name=docker state=stopped
  become: yes
  tags: [docker]
  when: rpi_docker_enabled == false


# add user to docker group
- name: add user to docker group
  become: yes
  user:
    name: "{{ ansible_user_id }}"
    groups: docker
    append: yes
  tags: [docker]


# folder structure
- name: Create docker folders
  file:
    path: "{{ item.dir }}"
    state: directory
    recurse: yes
    mode: "{{ item.mode }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
  with_items: "{{ docker_dir }}"
  become: yes
  tags: [docker]


# tools for managing docker containers/images
- import_tasks: manage_tools.yml
  tags: [docker]


# log
- name: output to rpicluster log
  shell: logger -t rpicluster ansible docker roll ran
  tags: [docker]
  changed_when: false


- name: roles info txt
  lineinfile:
    path: /opt/cluster/data/info_roles.txt
    line: "{{ role_path|basename }}"
    owner: root
    group: root
    mode: 0444
  become: yes
  tags: [docker]
