---
# Users public and private SSH keys
- debug: msg="ssh (keys) "
  tags: [ssh]


# Add SSH Pub key to ~/.ssh/authorized_keys
# note: this is not used since sshd only accepts keys signed by our CA
- name: import ssh key
  authorized_key:
    state: present
    user: "{{ ansible_user_id }}"
    key: "{{ lookup('file', 'files/ssh-pub-user/' + item.key) }}"
  with_items: "{{ sshpubkey }}"


# check for ~/.ssh/id_rsa
- name: check ssh private key
  stat: path="~/.ssh/id_rsa"
  register: sshprivkeyexists


# generate ssh key for current user if missing
- name: Generate a SSH key pair for this user
  user:
    name: "{{ ansible_user_id }}"
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: ~/.ssh/id_rsa
  tags: [common,commonssh,ssh]
  when:
    - sshprivkeyexists.stat.exists == false
  register: gen_ansible_user_ssh


- name: check ssh backup
  stat: path="/opt/cluster/data/{{ inventory_hostname }}_ssh_bu.tgz"
  register: sshpribackup
  become: yes


# backup generated key and ~/.ssh/
- name: backup user ssh dir on remote host
  archive:
    path: /home/{{ ansible_user_id }}/.ssh/
    dest: "/opt/cluster/data/{{ inventory_hostname }}_ssh_bu.tgz"
    owner: root
    group: root
    mode: 0440
  become: yes
  when: sshpribackup.stat.exists == false


# Saves to /opt/cluster/backup/<host>/home/<user>/.ssh/

- name: fetch the ssh public key
  fetch:
    src: ~/.ssh/id_rsa.pub
    dest: /opt/cluster/backup


- name: fetch the ssh PRIVATE key
  fetch:
    src: ~/.ssh/id_rsa
    dest: /opt/cluster/backup


# sign the SSH key
